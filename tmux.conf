# Use ` as prefix key.
unbind C-b
set -g prefix `
bind ` send-prefix

# Just run bash instead of creating login shell.
set -g default-command bash

# Use a colorful terminal.
set -g default-terminal "xterm-256color"

# Increase length of scroll back.
set -g history-limit 10000


# ==== Key bindings ==================================================

# Use vi bindings in copy mode.
set -g mode-keys vi

# Use emacs bindings in command mode.
set -g status-keys emacs

# Use t to cycle through panes.
bind -r t select-pane -t :.+

# Resize panes using vi keys.
bind -r H resize-pane -L 1
bind -r L resize-pane -R 1
bind -r J resize-pane -D 1
bind -r K resize-pane -U 1

# Use current pane's working directory for new windows and panes.
bind c   new-window      -c '#{pane_current_path}'
bind %   split-window -h -c '#{pane_current_path}'
bind '"' split-window -v -c '#{pane_current_path}'


# ==== Miscellaneous =================================================

# Make ssh agent forwarding work with tmux
#
# When we connect to a server via ssh, an ssh socket is created
# and and stored in the SSH_AUTH_SOCK environment variable.
# When attaching to an existing tmux session after reconnecting
# to the server, the tmux session remembers the old value of
# SSH_AUTH_SOCK, which, by then, points to a socket that no longer
# exists.  This breaks ssh agent forwarding.  The following code,
# when added to .bashrc, makes sure that SSH_AUTH_SOCK is always
# equal to ~/.ssh/ssh_auth_sock and that the latter is symlinked to
# the current and correct ssh socket.
#
# if [ "$SSH_AUTH_SOCK" != ~/.ssh/ssh_auth_sock ] && [ -S "$SSH_AUTH_SOCK" ]; then
#     ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
#     export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
# fi
